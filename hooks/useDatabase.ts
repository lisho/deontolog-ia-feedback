import { useState, useEffect, useCallback } from 'react';
import type { FeedbackData, ReviewStatus } from '../types.ts';

// Mock database interactions with local state and timeouts
export const useDatabase = () => {
    const [feedbackList, setFeedbackList] = useState<FeedbackData[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        // Simulate fetching initial data (now empty)
        setTimeout(() => {
            setFeedbackList([]); // Initialize with an empty array
            setIsLoading(false);
        }, 1000);
    }, []);

    const addFeedback = useCallback(async (data: FeedbackData) => {
        return new Promise<void>((resolve) => {
            setTimeout(() => {
                const newFeedback: FeedbackData = {
                    ...data,
                    // In a real app, the ID would be generated by the backend
                    id: `fb_${Date.now()}`,
                    timestamp: new Date(),
                    review_status: 'Pendiente',
                };
                // Add new feedback to the top of the list
                setFeedbackList(prev => [newFeedback, ...prev]);
                resolve();
            }, 500);
        });
    }, []);

    const updateFeedbackReview = useCallback(async (id: string, status: ReviewStatus, result: string) => {
        return new Promise<void>((resolve) => {
            setTimeout(() => {
                setFeedbackList(prev =>
                    prev.map(fb =>
                        fb.id === id ? { ...fb, review_status: status, review_result: result } : fb
                    )
                );
                resolve();
            }, 500);
        });
    }, []);

    const deleteFeedback = useCallback(async (id: string) => {
        return new Promise<void>((resolve) => {
            setTimeout(() => {
                setFeedbackList(prev => prev.filter(fb => fb.id !== id));
                resolve();
            }, 500);
        });
    }, []);


    return { feedbackList, isLoading, addFeedback, updateFeedbackReview, deleteFeedback };
};